require('dotenv').config();
const mongoose = require('mongoose');

async function testFinalAnalytics() {
  console.log('=== –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===\n');
  
  try {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(process.env.MONGO_URL);
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    const { PageView, ButtonClick, UserSession, Conversion, ChatEngagement } = require('./analytics.model');
    
    console.log('\nüß™ –¢–µ—Å—Ç –≤—Å–µ—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    const periods = ['day', 'week', 'month', 'year'];
    
    for (const period of periods) {
      console.log(`\nüìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥: ${period}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
      const now = new Date();
      let startDate;
      let previousStartDate;
      
      switch (period) {
        case 'day':
          // –° 00:00 –ø–æ –ú–°–ö (Europe/Moscow)
          const mskDateParts = new Intl.DateTimeFormat('en-CA', {
            timeZone: 'Europe/Moscow',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }).formatToParts(now).reduce((acc, p) => {
            if (p.type === 'year') acc.year = p.value;
            if (p.type === 'month') acc.month = p.value;
            if (p.type === 'day') acc.day = p.value;
            return acc;
          }, {});
          
          startDate = new Date(`${mskDateParts.year}-${mskDateParts.month}-${mskDateParts.day}T00:00:00+03:00`);
          const yesterday = new Date(startDate.getTime() - 24 * 60 * 60 * 1000);
          previousStartDate = new Date(yesterday.getTime());
          break;
          
        case 'week':
          // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π, –ù–ï –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏
          const yesterdayMsk = new Date(now.getTime() - 24 * 60 * 60 * 1000);
          const yesterdayMskParts = new Intl.DateTimeFormat('en-CA', {
            timeZone: 'Europe/Moscow',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }).formatToParts(yesterdayMsk).reduce((acc, p) => {
            if (p.type === 'year') acc.year = p.value;
            if (p.type === 'month') acc.month = p.value;
            if (p.type === 'day') acc.day = p.value;
            return acc;
          }, {});
          
          const weekEnd = new Date(`${yesterdayMskParts.year}-${yesterdayMskParts.month}-${yesterdayMskParts.day}T00:00:00+03:00`);
          startDate = new Date(weekEnd.getTime() - 7 * 24 * 60 * 60 * 1000);
          previousStartDate = new Date(startDate.getTime() - 7 * 24 * 60 * 60 * 1000);
          break;
          
        case 'month':
          // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π, –ù–ï –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏
          const monthYesterdayMsk = new Date(now.getTime() - 24 * 60 * 60 * 1000);
          const monthYesterdayMskParts = new Intl.DateTimeFormat('en-CA', {
            timeZone: 'Europe/Moscow',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }).formatToParts(monthYesterdayMsk).reduce((acc, p) => {
            if (p.type === 'year') acc.year = p.value;
            if (p.type === 'month') acc.month = p.value;
            if (p.type === 'day') acc.day = p.value;
            return acc;
          }, {});
          
          const monthWeekEnd = new Date(`${monthYesterdayMskParts.year}-${monthYesterdayMskParts.month}-${monthYesterdayMskParts.day}T00:00:00+03:00`);
          const monthWeekStart = new Date(monthWeekEnd.getTime() - 7 * 24 * 60 * 60 * 1000);
          
          startDate = new Date(monthWeekStart.getTime() - 23 * 24 * 60 * 60 * 1000);
          previousStartDate = new Date(startDate.getTime() - 30 * 24 * 60 * 60 * 1000);
          break;
          
        case 'year':
          // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 365 –¥–Ω–µ–π, –ù–ï –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏
          const yearYesterdayMsk = new Date(now.getTime() - 24 * 60 * 60 * 1000);
          const yearYesterdayMskParts = new Intl.DateTimeFormat('en-CA', {
            timeZone: 'Europe/Moscow',
            year: 'numeric',
            month: '2-digit',
            day: '2-digit'
          }).formatToParts(yearYesterdayMsk).reduce((acc, p) => {
            if (p.type === 'year') acc.year = p.value;
            if (p.type === 'month') acc.month = p.value;
            if (p.type === 'day') acc.day = p.value;
            return acc;
          }, {});
          
          const yearMonthEnd = new Date(`${yearYesterdayMskParts.year}-${yearYesterdayMskParts.month}-${yearYesterdayMskParts.day}T00:00:00+03:00`);
          const yearMonthStart = new Date(yearMonthEnd.getTime() - 30 * 24 * 60 * 60 * 1000);
          
          startDate = new Date(yearMonthStart.getTime() - 335 * 24 * 60 * 60 * 1000);
          previousStartDate = new Date(startDate.getTime() - 365 * 24 * 60 * 60 * 1000);
          break;
      }
      
      console.log(`  –ü–µ—Ä–∏–æ–¥: ${startDate.toISOString()} - ${period === 'day' ? '—Å–µ–π—á–∞—Å' : '–≤—á–µ—Ä–∞'}`);
      console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–π: ${previousStartDate.toISOString()} - ${startDate.toISOString()}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
      const pageViews = await PageView.find({ 
        timestamp: { $gte: startDate },
        page: { $ne: '/admin' }
      });
      
      const conversions = await Conversion.find({ 
        timestamp: { $gte: startDate },
        page: { $ne: '/admin' }
      });
      
      const userSessions = await UserSession.find({ 
        startTime: { $gte: startDate },
        pages: { $not: /^\/admin/ }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
      const previousPageViews = await PageView.find({ 
        timestamp: { $gte: previousStartDate, $lt: startDate },
        page: { $ne: '/admin' }
      });
      
      const previousConversions = await Conversion.find({ 
        timestamp: { $gte: previousStartDate, $lt: startDate },
        page: { $ne: '/admin' }
      });
      
      const previousSessions = await UserSession.find({ 
        startTime: { $gte: previousStartDate, $lt: startDate },
        pages: { $not: /^\/admin/ }
      });
      
      // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
      const uniqueSessionIds = new Set(userSessions.map(session => session.sessionId)).size;
      const previousUniqueSessionIds = new Set(previousSessions.map(session => session.sessionId)).size;
      
      const growth = previousUniqueSessionIds > 0 
        ? ((uniqueSessionIds - previousUniqueSessionIds) / previousUniqueSessionIds * 100).toFixed(1)
        : 0;
      
      console.log(`  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
      console.log(`    –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${uniqueSessionIds} (${growth >= 0 ? '+' : ''}${growth}%)`);
      console.log(`    –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${pageViews.length} (${previousPageViews.length > 0 ? ((pageViews.length - previousPageViews.length) / previousPageViews.length * 100).toFixed(1) : 0}%)`);
      console.log(`    –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: ${conversions.length} (${previousConversions.length > 0 ? ((conversions.length - previousConversions.length) / previousConversions.length * 100).toFixed(1) : 0}%)`);
    }
    
    console.log('\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.error(error.stack);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

testFinalAnalytics().catch(console.error);
