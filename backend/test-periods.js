require('dotenv').config();

console.log('=== –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ===\n');

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–µ—Ä–∏–æ–¥–æ–≤
function testPeriods() {
  const now = new Date();
  console.log('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC:', now.toISOString());
  console.log('–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö:', now.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }));
  console.log('');

  // –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ 'day'
  console.log('üìÖ –ü–µ—Ä–∏–æ–¥ "day" (–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏):');
  const mskDateParts = new Intl.DateTimeFormat('en-CA', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).formatToParts(now).reduce((acc, p) => {
    if (p.type === 'year') acc.year = p.value;
    if (p.type === 'month') acc.month = p.value;
    if (p.type === 'day') acc.day = p.value;
    return acc;
  }, {});
  
  const dayStart = new Date(`${mskDateParts.year}-${mskDateParts.month}-${mskDateParts.day}T00:00:00+03:00`);
  const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);
  const dayPrevious = new Date(dayStart.getTime() - 24 * 60 * 60 * 1000);
  
  console.log(`  –ù–∞—á–∞–ª–æ: ${dayStart.toISOString()} (${dayStart.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log(`  –ö–æ–Ω–µ—Ü: ${dayEnd.toISOString()} (${dayEnd.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å: ${dayPrevious.toISOString()} (${dayPrevious.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log('');

  // –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ 'week' (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  console.log('üìÖ –ü–µ—Ä–∏–æ–¥ "week" (–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è):');
  const yesterdayMsk = new Date(now.getTime() - 24 * 60 * 60 * 1000);
  const yesterdayMskParts = new Intl.DateTimeFormat('en-CA', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit'
  }).formatToParts(yesterdayMsk).reduce((acc, p) => {
    if (p.type === 'year') acc.year = p.value;
    if (p.type === 'month') acc.month = p.value;
    if (p.type === 'day') acc.day = p.value;
    return acc;
  }, {});
  
  const weekEnd = new Date(`${yesterdayMskParts.year}-${yesterdayMskParts.month}-${yesterdayMskParts.day}T00:00:00+03:00`);
  const weekStart = new Date(weekEnd.getTime() - 7 * 24 * 60 * 60 * 1000);
  const weekPrevious = new Date(weekStart.getTime() - 7 * 24 * 60 * 60 * 1000);
  
  console.log(`  –ù–∞—á–∞–ª–æ: ${weekStart.toISOString()} (${weekStart.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log(`  –ö–æ–Ω–µ—Ü: ${weekEnd.toISOString()} (${weekEnd.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è: ${weekPrevious.toISOString()} (${weekPrevious.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log('');

  // –¢–µ—Å—Ç –ø–µ—Ä–∏–æ–¥–∞ 'month' (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  console.log('üìÖ –ü–µ—Ä–∏–æ–¥ "month" (–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü):');
  const monthWeekEnd = new Date(`${yesterdayMskParts.year}-${yesterdayMskParts.month}-${yesterdayMskParts.day}T00:00:00+03:00`);
  const monthWeekStart = new Date(monthWeekEnd.getTime() - 7 * 24 * 60 * 60 * 1000);
  
  const monthEnd = new Date(monthWeekStart.getTime());
  const monthStart = new Date(monthEnd.getTime() - 30 * 24 * 60 * 60 * 1000);
  const monthPrevious = new Date(monthStart.getTime() - 30 * 24 * 60 * 60 * 1000);
  
  console.log(`  –ù–∞—á–∞–ª–æ: ${monthStart.toISOString()} (${monthStart.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log(`  –ö–æ–Ω–µ—Ü: ${monthEnd.toISOString()} (${monthEnd.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: ${monthPrevious.toISOString()} (${monthPrevious.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })})`);
  console.log('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π:');
  
  // –î–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—è
  const dayWeekOverlap = dayStart < weekEnd && dayEnd > weekStart;
  console.log(`  –î–µ–Ω—å –∏ –Ω–µ–¥–µ–ª—è –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: ${dayWeekOverlap ? '‚ùå –î–ê' : '‚úÖ –ù–ï–¢'}`);
  
  if (dayWeekOverlap) {
    console.log(`    –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: ${dayStart.toISOString()} - ${weekEnd.toISOString()}`);
  }
  
  // –î–µ–Ω—å –∏ –º–µ—Å—è—Ü
  const dayMonthOverlap = dayStart < monthEnd && dayEnd > monthStart;
  console.log(`  –î–µ–Ω—å –∏ –º–µ—Å—è—Ü –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: ${dayMonthOverlap ? '‚ùå –î–ê' : '‚úÖ –ù–ï–¢'}`);
  
  // –ù–µ–¥–µ–ª—è –∏ –º–µ—Å—è—Ü
  const weekMonthOverlap = weekStart < monthEnd && weekEnd > monthStart;
  console.log(`  –ù–µ–¥–µ–ª—è –∏ –º–µ—Å—è—Ü –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: ${weekMonthOverlap ? '‚ùå –î–ê' : '‚úÖ –ù–ï–¢'}`);
  
  if (weekMonthOverlap) {
    console.log(`    –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ: ${weekStart.toISOString()} - ${monthEnd.toISOString()}`);
  }

  console.log('');
  console.log('üìä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (!dayWeekOverlap && !dayMonthOverlap && !weekMonthOverlap) {
    console.log('‚úÖ –í—Å–µ –ø–µ—Ä–∏–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã');
  } else {
    console.log('‚ùå –ï—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤ - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É');
  }

  console.log('');
  console.log('üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤:');
  console.log('  ‚Ä¢ "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏": —Å 00:00 –ú–°–ö —Å–µ–≥–æ–¥–Ω—è –¥–æ 00:00 –ú–°–ö –∑–∞–≤—Ç—Ä–∞');
  console.log('  ‚Ä¢ "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è": —Å 00:00 –ú–°–ö 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ 00:00 –ú–°–ö –≤—á–µ—Ä–∞');
  console.log('  ‚Ä¢ "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü": —Å 00:00 –ú–°–ö 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ 00:00 –ú–°–ö –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏');
  console.log('  ‚Ä¢ "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥": —Å 00:00 –ú–°–ö 365 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–æ 00:00 –ú–°–ö –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞');
}

testPeriods();
console.log('=== –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===');
