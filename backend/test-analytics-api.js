require('dotenv').config();
const mongoose = require('mongoose');

async function testAnalyticsAPI() {
  console.log('=== –¢–µ—Å—Ç API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===\n');
  
  try {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await mongoose.connect(process.env.MONGO_URL);
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
    const { PageView, ButtonClick, UserSession, Conversion, ChatEngagement } = require('./analytics.model');
    
    console.log('\nüß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å—É—Ç–æ—á–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ 'day'
    const now = new Date();
    const mskDateParts = new Intl.DateTimeFormat('en-CA', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).formatToParts(now).reduce((acc, p) => {
      if (p.type === 'year') acc.year = p.value;
      if (p.type === 'month') acc.month = p.value;
      if (p.type === 'day') acc.day = p.value;
      return acc;
    }, {});
    
    const startDate = new Date(`${mskDateParts.year}-${mskDateParts.month}-${mskDateParts.day}T00:00:00+03:00`);
    const yesterday = new Date(startDate.getTime() - 24 * 60 * 60 * 1000);
    
    console.log('üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:');
    console.log(`  –ù–∞—á–∞–ª–æ —Å—É—Ç–æ–∫ –ú–°–ö: ${startDate.toISOString()}`);
    console.log(`  –í—á–µ—Ä–∞ –ú–°–ö: ${yesterday.toISOString()}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
    const pageViews = await PageView.find({ 
      timestamp: { $gte: startDate },
      page: { $ne: '/admin' }
    });
    
    const buttonClicks = await ButtonClick.find({ 
      timestamp: { $gte: startDate },
      page: { $ne: '/admin' }
    });
    
    const conversions = await Conversion.find({ 
      timestamp: { $gte: startDate },
      page: { $ne: '/admin' }
    });
    
    const chatEngagement = await ChatEngagement.find({ timestamp: { $gte: startDate } });
    const userSessions = await UserSession.find({ 
      startTime: { $gte: startDate },
      pages: { $not: /^\/admin/ }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–µ—Ä–∏–æ–¥
    const previousPageViews = await PageView.find({ 
      timestamp: { $gte: yesterday, $lt: startDate },
      page: { $ne: '/admin' }
    });
    
    const previousConversions = await Conversion.find({ 
      timestamp: { $gte: yesterday, $lt: startDate },
      page: { $ne: '/admin' }
    });
    
    const previousSessions = await UserSession.find({ 
      startTime: { $gte: yesterday, $lt: startDate },
      pages: { $not: /^\/admin/ }
    });
    
    console.log('\nüìä –î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–µ —Å—É—Ç–∫–∏:');
    console.log(`  PageView: ${pageViews.length}`);
    console.log(`  ButtonClick: ${buttonClicks.length}`);
    console.log(`  Conversion: ${conversions.length}`);
    console.log(`  ChatEngagement: ${chatEngagement.length}`);
    console.log(`  UserSession: ${userSessions.length}`);
    
    console.log('\nüìä –î–∞–Ω–Ω—ã–µ –∑–∞ –≤—á–µ—Ä–∞:');
    console.log(`  PageView: ${previousPageViews.length}`);
    console.log(`  Conversion: ${previousConversions.length}`);
    console.log(`  UserSession: ${previousSessions.length}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    const uniqueIps = new Set(userSessions.map(session => session.ip)).size;
    const uniqueSessionIds = new Set(userSessions.map(session => session.sessionId)).size;
    
    console.log('\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏:');
    console.log(`  –ü–æ IP: ${uniqueIps}`);
    console.log(`  –ü–æ SessionId: ${uniqueSessionIds}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º overview
    const overview = {
      totalVisitors: uniqueSessionIds,
      previousVisitors: [...new Set(previousSessions.map(s => s.sessionId))].length,
      totalPageViews: pageViews.length,
      previousPageViews: previousPageViews.length,
      totalConversions: conversions.length,
      previousConversions: previousConversions.length
    };
    
    console.log('\nüìà Overview:');
    console.log(`  –¢–µ–∫—É—â–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${overview.totalVisitors}`);
    console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${overview.previousVisitors}`);
    console.log(`  –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${overview.totalPageViews}`);
    console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${overview.previousPageViews}`);
    console.log(`  –¢–µ–∫—É—â–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ${overview.totalConversions}`);
    console.log(`  –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: ${overview.previousConversions}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–æ—Å—Ç
    const growthVisitors = overview.previousVisitors > 0 
      ? ((overview.totalVisitors - overview.previousVisitors) / overview.previousVisitors * 100).toFixed(1)
      : 0;
    
    const growthPageViews = overview.previousPageViews > 0
      ? ((overview.totalPageViews - overview.previousPageViews) / overview.previousPageViews * 100).toFixed(1)
      : 0;
    
    console.log('\nüìä –†–æ—Å—Ç (%):');
    console.log(`  –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏: ${growthVisitors}%`);
    console.log(`  –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${growthPageViews}%`);
    
    console.log('\n‚úÖ –¢–µ—Å—Ç API –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    console.error(error.stack);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

testAnalyticsAPI().catch(console.error);
